public class CountNumberWithUniqueDigits {

  public static int countNumberWithUniqueDigits(int n){
    public static void main(String[] args) {
        int n = 3; // Change this to any digit length (e.g., 2, 3, 4)
        findUniqueDigitNumbers(n);
        int digits = 3; // try changing to 2, 4, etc.
        int result = countUniqueDigitNumbers(digits);
        System.out.println("Total " + digits + "-digit numbers with unique digits: " + result);
    }

    public static void findUniqueDigitNumbers(int digits) {
        if (digits <= 0 || digits >= 10) {
            System.out.println("Only supports digit length between 1 and 9.");
            return;
        }

        int start = (int) Math.pow(10, digits - 1);
        int end = (int) Math.pow(10, digits) - 1;

        for (int num = start; num <= end; num++) {
            if (hasAllUniqueDigits(num)) {
                System.out.println(num);
            }
        }
    }

    public static boolean hasAllUniqueDigits(int num) {
        boolean[] seen = new boolean[10]; // for digits 0-9
        while (num > 0) {
            int digit = num % 10;
            if (seen[digit]) return false;
            seen[digit] = true;
            num /= 10;
        }
        return true;
    
  }
public static int countUniqueDigitNumbers(int digits) {
        if (digits <= 0 || digits > 10) return 0;

        int count = 9; // first digit can't be 0
        for (int i = 1; i < digits; i++) {
            count *= (10 - i); // reduce options for each next digit
        }
        return count;
    }


}
